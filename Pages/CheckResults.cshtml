@page
@model QuizClash_Arena_Multimedia.Pages.CheckResultsModel
@{
    <style>
        body {
            background-image: url('/images/fondo_azul.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            font-family: Arial, sans-serif;
            color: white;
            margin: 0;
            padding: 0;
        }

        .player-info {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.8);
        }

            .player-info img {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                border: 2px solid #ffcc00;
            }

        .rounds-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            margin-top: 150px;
            padding: 30px;
            gap: 20px;
        }

        .round-container {
            flex: 0 1 300px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.6);
            text-align: center;
            transition: transform 0.3s, box-shadow 0.3s;
        }

            .round-container:hover {
                transform: scale(1.05);
                box-shadow: 0 8px 20px rgba(255, 204, 0, 0.8);
            }

        .round-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 15px;
            border: 3px solid #ffcc00;
            margin-bottom: 15px;
        }

        .answers {
            margin-top: 15px;
            overflow-y: auto;
            padding: 10px;
            background: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            box-shadow: inset 0 4px 8px rgba(0, 0, 0, 0.6);
        }

        .answer {
            background: rgba(255, 255, 255, 0.2);
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            text-align: left;
        }

            .answer p {
                margin: 0;
                font-size: 1rem;
            }

        .vote-button {
            margin-top: 10px;
            background-color: #ffcc00;
            color: black;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            display: none; /* Ocultar inicialmente */
        }

        #countdown {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 1.5rem;
        }
    </style>

    <div class="player-info">
        <img src="@Model.PlayerAvatar" alt="Avatar del Jugador" />
        <div>
            <p><strong>Nombre:</strong> @Model.PlayerName</p>
            <p><strong>Código de la Sala:</strong> @Model.RoomCode</p>
        </div>
    </div>

    <div class="rounds-container">
        @for (int i = 0; i < @Model.CurrentRoom.Rounds.Count; i++)
        {
            var round = @Model.CurrentRoom.Rounds[i];
            <div class="round-container" data-round-number="@i">
                <img src="@round.MemePath" alt="Meme" class="round-image" />
                <div class="answers">
                    @foreach (var answer in round.Answers)
                    {
                        <div class="answer">
                            <p><strong>@answer.PlayerName:</strong> @answer.Response</p>
                            @if (answer.PlayerName != @Model.PlayerName)
                            {
                                <button class="vote-button" onclick="vote(this, '@answer.PlayerName', '@answer.Response', @i)">Votar</button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    <div class="mt-4">
        @if (Model.Twitch?.Equals("True", StringComparison.OrdinalIgnoreCase) == true)
        {
            <button id="playGameButton" class="btn btn-success">¡Inicia votación en twitch!</button>
        }
        @if (Model.Twitch?.Equals("False", StringComparison.OrdinalIgnoreCase) == true)
        {
            <form method="get" id="irAnuevaPagina" asp-page="CheckResults" onsubmit="VotingGame(event)" style="display: block;">
                <button id="enableVotingButton" type="submit" class="start-game-button">
                    Habilitar votaciones locales
                </button>
            </form>
        }
    </div>

    <div id="countdown"></div>

    <!-- Incluir jQuery antes de SignalR -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
        connection.start().catch(err => console.error("Error de conexión: ", err));
        document.addEventListener("DOMContentLoaded", function () {
            const playGameButton = document.getElementById("playGameButton");
            if (playGameButton) {
                playGameButton.addEventListener("click", function () {
                    const roomCode = '@Model.RoomCode';
                    const playerName = '@Model.PlayerName';
                    const playerAvatar = '@Model.PlayerAvatar';

                    // Construir la URL con los parámetros
                    const url = `/start-chat-poll?roomCode=${roomCode}&playerName=${playerName}&playerAvatar=${playerAvatar}`;

                    // Redirigir a la URL construida
                    window.location.href = url;
                });
            }

            const enableVotingButton = document.getElementById("enableVotingButton");
            if (enableVotingButton) {
                enableVotingButton.addEventListener("click", function (event) {
                    event.preventDefault();
                    console.log("Botón de habilitar votaciones locales clicado");
                    enableVotingButton.style.display = 'none';
                    const voteButtons = document.querySelectorAll('.vote-button');
                    voteButtons.forEach(button => {
                        button.style.display = 'inline-block';
                        console.log("Botón de votación mostrado");
                    });
                    VotingGame(event);
                    startCountdown();
                });
            }

            const form = document.getElementById("irAnuevaPagina");
            if (form) {
                form.addEventListener("submit", VotingGame);
            }

            // Iniciar el contador para todos los jugadores
            startCountdown();
        });

        function vote(button, playerName, response, roundNumber) {
            const roundContainer = button.closest('.round-container');
            const voteButtons = roundContainer.querySelectorAll('.vote-button');
            voteButtons.forEach(btn => btn.style.display = 'none');

            const roomCode = '@Model.RoomCode';
            connection.invoke("VotarRespuesta", roomCode, roundNumber, playerName, response).then(() => {
                console.log(`Response: ${playerName} - ${response}, Round: ${roundNumber}, Room Code: ${roomCode}`);
            }).catch(function (err) {
                console.error(err.toString());
            });
        }

        function VotingGame(event) {
            event.preventDefault();
            const roomCode = '@Model.RoomCode';
            connection.invoke("VotingGame", roomCode).then(() => {
                console.log("Juego de votación iniciado");
            }).catch(function (err) {
                console.error(err.toString());
            });
        }
        let already = false;
        function checkGameVoting() {
            if (already) {
                return;
            } else {
                const roomCode = '@Model.RoomCode';
                connection.invoke("IsVotingGame", roomCode).then(isStarted => {
                    if (isStarted) {
                        already = true;
                        const voteButtons = document.querySelectorAll('.vote-button');
                        voteButtons.forEach(button => {
                            button.style.display = 'inline-block';
                            console.log("Botón de votación mostrado");
                        });
                    }
                }).catch(function (err) {
                    console.error(err.toString());
                });
            }
        }

        // Comprobar si el juego ha comenzado cada 5 segundos
        const playerName = '@Model.PlayerName';
        const creatorName = '@Model.CreatorName';
        if (playerName !== creatorName) {
            setInterval(checkGameVoting, 1000);
        }

        // Función para iniciar el contador de 1 minuto
        function startCountdown() {
            let timeLeft = 60;
            const countdownElement = document.getElementById('countdown');

            const countdownInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(countdownInterval);
                    //window.location.href = `@Url.Page("MainGame")?roomCode=${roomCode}&playerName=${playerName}&playerAvatar=${playerAvatar}&twitch=${@Model.Twitch}`;

                    window.location.href = `/winning_result?twitch=${encodeURIComponent('@Model.Twitch')}`;
                } else {
                    countdownElement.textContent = `Tiempo restante: ${timeLeft} segundos`;
                    timeLeft--;
                }
            }, 1000);
        }
    </script>
}
