@page
@model QuizClash_Arena_Multimedia.Pages.MainGameModel
@{
    ViewData["Title"] = "Meme Aleatorio";
}
<style>
    /* General Styles */
    body {
        background-image: url('/images/fondo_azul.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        font-family: Arial, sans-serif;
        color: white;
        margin: 0;
        padding: 0;
    }

    /* Contenedor principal */
    .main-container {
        text-align: center;
        margin: 30px auto;
        padding: 10px;
        max-width: 1150px;
        background: rgba(0, 0, 0, 0.6);
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
    }

    /* Estilo del título */
    h1 {
        font-size: 3em;
        margin-bottom: 20px;
        background: linear-gradient(90deg, #ff6699, #ffcc00);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    }

    /* Contenedor de la imagen de meme */
    .meme-container {
        margin-bottom: 30px;
    }

    .random-meme {
        max-width: 80%;
        max-height: 400px;
        border: 1px solid #ccc;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .random-meme:hover {
            transform: scale(1.05);
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
        }

    /* Estilo del formulario */
    .text-entry-container {
        background-color: rgba(255, 255, 255, 0.9); /* Fondo blanco translúcido */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        display: inline-block;
        max-width: 500px;
        width: 100%;
    }

    .form-label {
        font-size: 16px;
        font-weight: bold;
        color: #333;
        margin-bottom: 8px;
        display: block;
    }

    .form-textarea {
        width: 100%;
        padding: 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        margin-bottom: 15px;
        resize: none;
        transition: border-color 0.3s;
    }

        .form-textarea:focus {
            border-color: #ffcc00;
            outline: none;
        }

    .player-info {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.6);
        padding: 10px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: white;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
    }

        .player-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }

    #irAnuevaPagina {
        display: flex; /* Alinea el botón si decides añadir más elementos en el futuro */
        justify-content: center; /* Centra el botón horizontalmente */
        margin: 0; /* Elimina cualquier espacio extra */
        padding: 0; /* Elimina relleno extra */
        background: none; /* Quita el fondo blanco del contenedor */
    }

    .start-game-button {
        font-size: 1.5rem;
        font-weight: bold;
        padding: 15px 30px;
        background: linear-gradient(90deg, #ff6633, #ffcc00);
        color: white;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
        transition: transform 0.3s, box-shadow 0.3s, background 0.3s;
    }

        .start-game-button:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.6);
            background: linear-gradient(90deg, #ff4500, #ffcc00);
        }

        .start-game-button:active {
            transform: scale(1.05);
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.6);
            background: linear-gradient(90deg, #ff3300, #ffb300);
        }

    .submit-button {
        padding: 12px 20px;
        font-size: 16px;
        background-color: #ff6633; /* Color naranja */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

    button:hover {
        background-color: #ff4500;
        transform: scale(1.1);
        .submit-button:focus

    {
        outline: none;
    }
</style>

<!-- Incluir jQuery antes de SignalR -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>

<div class="main-container">
    <h1>Meme Aleatorio</h1>
    <div class="meme-container">
        <img id="randomMeme" src="@Model.MemePath1" alt="Meme" class="random-meme">
    </div>

    <!-- Formulario para ingresar texto -->
    <div class="text-entry-container">
        <form method="get" asp-page-handler="Submit" id="submitForm">
            <label id="textito" for=" userText" class="form-label">Escribe tu texto:</label>
            <textarea id="userText" name="userText" class="form-textarea" rows="4" placeholder="Escribe algo..."></textarea>
            <button type="button" id="sendButton" onclick="sendToHub('@Model.RoomCode', document.getElementById('userText').value, '@Model.PlayerName')">Enviar</button>
            <button type="button" style="display: none;">n</button>
        </form>
        <form method="get" id="irAnuevaPagina" asp-page="CheckResults" onsubmit="FinishGame(event)" style="display: none;">
            <button id="irAnuevaPaginaButton" type="submit" class="start-game-button">
                Ir a la Votación
            </button>
        </form>
    </div>
    <div class="player-info">
        <img src="@Model.PlayerAvatar" alt="Avatar del Jugador" />
        <div>
            <p><strong>Nombre:</strong> @Model.PlayerName</p>
            <p><strong>Código de la Sala:</strong> @Model.RoomCode</p>
        </div>
    </div>
</div>

<script>
    let currentMemeIndex = 0;
    const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
    const roomCode = "@Model.RoomCode";
    const playerName = "@Model.PlayerName";
    const creatorName = "@Model.CreatorName";
    const playerAvatar = "@Model.PlayerAvatar"
    const twitch = '@Model.Twitch';
    const memePaths = [
        '@Model.MemePath1',
        '@Model.MemePath2',
        '@Model.MemePath3',
        '@Model.MemePath4',
        '@Model.MemePath5'
    ];

    // Inicia la conexión

    connection.start().catch(err => console.error("Error de conexión: ", err));

    // Función para enviar datos al GameHub
    function sendToHub(codeRoom, userText, playerName) {
        connection.invoke("SendData", codeRoom, currentMemeIndex, userText, playerName)
            .catch(err => console.error("Error al enviar datos: ", err));

        currentMemeIndex = (currentMemeIndex + 1) % (memePaths.length + 1);
        const memeImage = document.getElementById("randomMeme");
        if (memeImage) {
            memeImage.src = memePaths[currentMemeIndex];
        }

        // Vaciar el contenido del textarea
        document.getElementById("userText").value = "";

        // Ocultar el botón actual y mostrar el nuevo botón cuando currentMemeIndex sea 5
        if (currentMemeIndex === 5) {
            document.getElementById("sendButton").style.display = "none";
            document.getElementById("textito").style.display = "none";
            document.getElementById("userText").style.display = "none";
            document.getElementById("randomMeme").style.display = "none";
            document.getElementById("irAnuevaPagina").style.display = "block";

            // Habilitar o deshabilitar el botón basado en el nombre del jugador
            const irAnuevaPaginaButton = document.getElementById("irAnuevaPaginaButton");
            if (playerName !== creatorName) {
                irAnuevaPaginaButton.disabled = true;
            } else {
                irAnuevaPaginaButton.disabled = false;
            }
        }
    }

    function FinishGame(event) {
        event.preventDefault();
        connection.invoke("FinishGame", roomCode).then(() => {
            console.log("Juego iniciado");
            window.location.href = `CheckResults?roomCode=${roomCode}&playerName=${playerName}&playerAvatar=${playerAvatar}&twitch=${twitch}`;
        }).catch(function (err) {
            console.error(err.toString());
        });
    }

    function checkGameStarted() {
        connection.invoke("IsGameFinish", roomCode).then(isStarted => {
            if (isStarted) {
                window.location.href = `CheckResults?roomCode=${roomCode}&playerName=${playerName}&playerAvatar=${playerAvatar}&twitch=${twitch}`;
            }
        }).catch(function (err) {
            console.error(err.toString());
        });
    }
    // Comprobar si el juego ha comenzado cada 5 segundos
    if (playerName !== creatorName) {
        setInterval(checkGameStarted, 1000);
    }
</script>
